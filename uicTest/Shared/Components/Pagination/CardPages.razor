@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using uicTest.Shared.Components.Card
@using uicTest.Data
@inject CardItemService CardService
@implements IHandleEvent

@*Title text*@
<div class="text-center mb-5">
    <h1>@Title</h1>
</div>

<div class="container d-flex flex-row justify-content-center align-content-center overflow-hidden">
    @* foreach *@
    @for (var page = 0; page < CardItems.Length / 4; page++)
    {
        string idName = @componentID + "-" + "page" + (page + 1).ToString();
        componentPages.Add(idName);
        string active = "";
        if (page == 0) active = "active";

        <div id=@idName class="container-page @active overflow-hidden">
            <div class="row">
                @for (var i = 0; i < 4; i++)
                {
                    int pos = page + i;
                    mode = (cardCount % 4 == 1 ? "v-h" : "");
                    <div class="col-md">
                        <Card Mode=@mode
                      Date="@CardItems[pos].Date.ToString()"
                      Title="@CardItems[pos].Title"
                      Img="@CardItems[pos].Img">
                            @CardItems[pos].Desc
                        </Card>
                    </div>
                    if (cardCount % 4 == 1 || cardCount % 4 == 0)
                    {
                        <div class="w-100"></div>
                    }
                    cardCount++;
                }
            </div>
        </div>
    }
</div>
<div class="row justify-content-center gap-3">
    @for (var i = 0; i < cardCount / 4; i++)
    {
        string buttonName = "button" + (i + 1).ToString();
        string idName = @componentID + "-" + "page" + (i + 1).ToString();
        string className = @componentID + "-" + "button";
        string active = "";
        if (i == 0) active = "active";

        <div @onclick=@(()=> ToggleActivePage(@idName, "container-page", @className, @buttonName)) class="button-page @className @buttonName @active"></div>
        //<div id=@idName onclick="toggleActivePage(event, @idName)" class="button-page @active"></div>

    }
</div>


@*Pages Buttons*@
@*More News Button*@
<div class="text-center my-5">
    <a href="#">More</a>
</div>

@code {
    private string mode = "";
    private int cardCount = 1;

    [Parameter]
    public CardItem[]? @CardItems { get; set; }
    private int totalCards = 0;

    [Parameter]
    public string @Title { get; set; } = "Title";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string? componentID;
    private List<string> componentPages = new List<string>();

    private async void ToggleActivePage(string id, string pageClass, string buttonClass, string button)
    {
        await JSRuntime.InvokeVoidAsync("toggleActivePage", id, pageClass, button, buttonClass);
    }

    // get card Item data
    protected override async Task OnInitializedAsync()
    {
        CardItems = await CardService.GetCardAsync(DateTime.Now);
    }

    //Using IHandleEvent to stop rerendering which prevent the buttons from duplicating themself when clicking
    Task IHandleEvent.HandleEventAsync(
        EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);

    //Blazor Pages, Routing, and Layouts [4 of 11] | Blazor for Beginners
    //https://youtu.be/dMc-S8VkbIE?t=592
    protected override void OnParametersSet()
    {
        componentID = @Title.Replace(" ", "-");
        totalCards = CardItems.Length;
        base.OnParametersSet();
    }
}